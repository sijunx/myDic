<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:apollo="http://www.ctrip.com/schema/apollo"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.ctrip.com/schema/apollo http://www.ctrip.com/schema/apollo.xsd">

	<context:property-placeholder location="classpath:conf/*.properties" file-encoding="utf-8" />

	<!--<import resource="dubbo-provider.xml"/>-->
	<apollo:config/>


	<context:annotation-config />


	<!-- 配置数据源 -->
	<bean id="baseDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select 'x' " />
		<property name="logAbandoned" value="true" />
		<!-- 开启监控统计功能 -->
		<!-- <property name="proxyFilters">
			<list>
				<ref bean="log-filter" />
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property> -->
	</bean>


	<!--定义数据源 DBCP 连接池 -->
	<bean id="dataSource" parent="baseDataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
	</bean>

	<!--定义数据源 DBCP 连接池 -->
	<bean id="dataSource_slave" parent="baseDataSource">
		<property name="url" value="${jdbc.url_slave}" />
		<property name="username" value="${jdbc.username_slave}" />
		<property name="password" value="${jdbc.password_slave}" />

		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
	</bean>

	<!--&lt;!&ndash; 多数据源配置 &ndash;&gt;-->
	<!--<bean id="dataSource" class="com.spider.user.service.dbcp.SpiderDynamicDataSource">-->
	<!--<property name="targetDataSources">-->
	<!--<map key-type="java.lang.String">-->
	<!--<entry value-ref="dataSource_master" key="dataSource_master"/>-->
	<!--<entry value-ref="dataSource_slave" key="dataSource_slave" />-->
	<!--</map>-->
	<!--</property>-->
	<!--&lt;!&ndash; 默认使用原来的数据源 &ndash;&gt;-->
	<!--<property name="defaultTargetDataSource" ref="dataSource_master"/>-->
	<!--</bean>-->

	<!-- myBatis扫描所有Mapper -->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"-->
	<!--p:basePackage="com.spider.scrawl.provider.dao.mapper"-->
	<!--p:sqlSessionFactoryBeanName="spider-sqlSessionFactory">-->
	<!--</bean>-->


	<!-- 扫描 basePackage下Mapper的接口,根据对应的mapper.xml为其生成代理类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="spider-sqlSessionFactory"/>
		<property name="basePackage" value="com.spider.scrawl.provider.dao.mapper"/>
	</bean>

	<!-- 事务管理器配置 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置sqlSessionFactory -->
	<bean id="spider-sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="com.spider.scrawl.provider.dao.entity"/>
		<property name="mapperLocations" value="classpath*:mapper/*.xml"/>
		<!--<property name="plugins">-->
		<!--<array>-->
		<!--&lt;!&ndash; 慢sql监控 &ndash;&gt;-->
		<!--<bean class="com.spider.base.mybatis.dao.interceptor.SpiderSqlExplainInterceptor">-->
		<!--</bean>-->
		<!--&lt;!&ndash; 分页插件 &ndash;&gt;-->
		<!--<bean class="com.github.pagehelper.PageInterceptor">-->
		<!--<property name="properties">-->
		<!--<value>-->
		<!--helperDialect=mysql-->
		<!--reasonable=true-->
		<!--supportMethodsArguments=true-->
		<!--params=count=countSql-->
		<!--autoRuntimeDialect=true-->
		<!--</value>-->
		<!--</property>-->
		<!--</bean>-->
		<!--</array>-->
		<!--</property>-->
	</bean>


	<!--<bean id="spiderDynamicDataSourceAspect" class="com.spider.user.service.dbcp.SpiderDynamicDataSourceAspect">-->
	<!--</bean>-->

	<!-- 扫描所有的service实现类，依赖注入 -->
	<!--<context:component-scan base-package="com.java.spi.common.Search"/>-->
	<context:component-scan base-package="com.java.spi.demo.a.impl"/>
	<!--<context:component-scan base-package="com.spider.scrawl.provider.*,com.java.spi.common.*">-->
		<!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
	<!--</context:component-scan>-->



</beans>